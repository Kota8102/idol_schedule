{"ast":null,"code":"var _jsxFileName = \"/workspaces/react/myapp/src/component/atom/checkbox.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext } from 'react';\nimport CheckboxContext from '../../contexts/CheckboxContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Checkbox = _ref => {\n  _s();\n  let {\n    inp_name,\n    color,\n    index,\n    groupid\n  } = _ref;\n  // const [isChecked, setIsChecked] = useState(input_check);\n\n  // const {check, setCheck} = useContext(CheckboxContext);\n  const {\n    checkList,\n    setCheckList,\n    groupidList,\n    setGroupidList\n  } = useContext(CheckboxContext);\n  // const { checkList, setCheckList } = useContext(CheckboxContext);\n\n  return /*#__PURE__*/_jsxDEV(\"label\", {\n    className: \"flex my-1 items-center hover:bg-gray-200 px-2\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\"\n      // checked={isChecked}\n      ,\n      checked: checkList[index]\n      // onChange={() => setIsChecked(!isChecked)}\n      ,\n      onChange: () => {\n        const newCheckList = [...checkList];\n        if (checkList[index]) {\n          newCheckList[index] = false;\n          setGroupidList(groupidList.filter(e => e !== groupid));\n        } else {\n          newCheckList[index] = true;\n          setGroupidList([...groupidList, groupid]);\n        }\n        setCheckList(newCheckList);\n        // const newCheckList = [...checkList];\n        // newCheckList[index] = !checkList[index];\n        // setCheckList(newCheckList);\n\n        // setIsChecked(!isChecked);\n\n        // setCheck(!isChecked);\n        // setName(!isChecked ? inp_name: \"\");\n        // onChange();\n      },\n\n      className: `${color} w-4 h-4`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"px-2 truncate\",\n      children: inp_name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n_s(Checkbox, \"JxsdBX2gb5cV6F8dzbFkvrPbXzo=\");\n_c = Checkbox;\nexport default Checkbox;\nvar _c;\n$RefreshReg$(_c, \"Checkbox\");","map":{"version":3,"names":["React","useContext","CheckboxContext","Checkbox","inp_name","color","index","groupid","checkList","setCheckList","groupidList","setGroupidList","newCheckList","filter","e"],"sources":["/workspaces/react/myapp/src/component/atom/checkbox.tsx"],"sourcesContent":["import React, { useState, useContext } from 'react';\nimport CheckboxContext from '../../contexts/CheckboxContext';\n\ntype Props = {\n    inp_name : string\n    // isCheck?: boolean\n    color: string\n    index: number\n    groupid :string\n    // onChange : () => void\n}\n\n\nconst Checkbox: React.FC<Props> = ( {inp_name, color, index, groupid }) => {\n\n    // const [isChecked, setIsChecked] = useState(input_check);\n\n    // const {check, setCheck} = useContext(CheckboxContext);\n    const { checkList, setCheckList, groupidList, setGroupidList } = useContext(CheckboxContext);\n    // const { checkList, setCheckList } = useContext(CheckboxContext);\n\n    return (\n        <label className=\"flex my-1 items-center hover:bg-gray-200 px-2\">\n            <input\n                type=\"checkbox\"\n                // checked={isChecked}\n                checked={checkList[index]}\n                // onChange={() => setIsChecked(!isChecked)}\n                onChange={() => {\n\n                    const newCheckList = [...checkList];\n                    if(checkList[index]) {\n                        newCheckList[index] = false;\n                        setGroupidList(groupidList.filter((e)=> e!==groupid));\n                    } else {\n                        newCheckList[index] = true;\n                        setGroupidList([...groupidList,groupid]);\n                    }\n                    setCheckList(newCheckList);\n                    // const newCheckList = [...checkList];\n                    // newCheckList[index] = !checkList[index];\n                    // setCheckList(newCheckList);\n \n                    // setIsChecked(!isChecked);\n\n                    // setCheck(!isChecked);\n                    // setName(!isChecked ? inp_name: \"\");\n                    // onChange();\n                  }}\n                className= {`${color} w-4 h-4`}\n            />\n            <p className=\"px-2 truncate\">{inp_name}</p>\n        </label>\n    );\n\n}\n\nexport default Checkbox;"],"mappings":";;AAAA,OAAOA,KAAK,IAAcC,UAAU,QAAQ,OAAO;AACnD,OAAOC,eAAe,MAAM,gCAAgC;AAAC;AAY7D,MAAMC,QAAyB,GAAG,QAAyC;EAAA;EAAA,IAAvC;IAACC,QAAQ;IAAEC,KAAK;IAAEC,KAAK;IAAEC;EAAQ,CAAC;EAElE;;EAEA;EACA,MAAM;IAAEC,SAAS;IAAEC,YAAY;IAAEC,WAAW;IAAEC;EAAe,CAAC,GAAGV,UAAU,CAACC,eAAe,CAAC;EAC5F;;EAEA,oBACI;IAAO,SAAS,EAAC,+CAA+C;IAAA,wBAC5D;MACI,IAAI,EAAC;MACL;MAAA;MACA,OAAO,EAAEM,SAAS,CAACF,KAAK;MACxB;MAAA;MACA,QAAQ,EAAE,MAAM;QAEZ,MAAMM,YAAY,GAAG,CAAC,GAAGJ,SAAS,CAAC;QACnC,IAAGA,SAAS,CAACF,KAAK,CAAC,EAAE;UACjBM,YAAY,CAACN,KAAK,CAAC,GAAG,KAAK;UAC3BK,cAAc,CAACD,WAAW,CAACG,MAAM,CAAEC,CAAC,IAAIA,CAAC,KAAGP,OAAO,CAAC,CAAC;QACzD,CAAC,MAAM;UACHK,YAAY,CAACN,KAAK,CAAC,GAAG,IAAI;UAC1BK,cAAc,CAAC,CAAC,GAAGD,WAAW,EAACH,OAAO,CAAC,CAAC;QAC5C;QACAE,YAAY,CAACG,YAAY,CAAC;QAC1B;QACA;QACA;;QAEA;;QAEA;QACA;QACA;MACF,CAAE;;MACJ,SAAS,EAAI,GAAEP,KAAM;IAAU;MAAA;MAAA;MAAA;IAAA,QACjC,eACF;MAAG,SAAS,EAAC,eAAe;MAAA,UAAED;IAAQ;MAAA;MAAA;MAAA;IAAA,QAAK;EAAA;IAAA;IAAA;IAAA;EAAA,QACvC;AAGhB,CAAC;AAAA,GA1CKD,QAAyB;AAAA,KAAzBA,QAAyB;AA4C/B,eAAeA,QAAQ;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}