{"ast":null,"code":"var _jsxFileName = \"/workspaces/react/myapp/src/component/layout.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport CheckboxContext from '../contexts/CheckboxContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Layout = _ref => {\n  _s();\n  let {\n    children,\n    isIdolslist\n  } = _ref;\n  // const [check, setCheck] = useState(false);\n  // const [name, setName] = useState('');\n\n  // const [checkList, setCheckList] = useState<boolean[]>([]);\n  const [groupidList, setGroupidList] = useState([\"1\", \"2\", \"3\"]);\n  const [checkList, setCheckList] = useState(new Array(3).fill(true));\n  return (\n    /*#__PURE__*/\n    // <CheckboxContext.Provider value={{check, setCheck, name, setName}}>\n    _jsxDEV(CheckboxContext.Provider, {\n      value: {\n        checkList,\n        setCheckList,\n        groupidList,\n        setGroupidList\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)\n  );\n};\n_s(Layout, \"+VQyGAKxZ1furIfrUnuBqB3Ke9I=\");\n_c = Layout;\nexport default Layout;\nvar _c;\n$RefreshReg$(_c, \"Layout\");","map":{"version":3,"names":["React","useState","CheckboxContext","Layout","children","isIdolslist","groupidList","setGroupidList","checkList","setCheckList","Array","fill"],"sources":["/workspaces/react/myapp/src/component/layout.tsx"],"sourcesContent":["import React, { ReactNode, useState } from 'react'\n\nimport Header from './header'\nimport Footer from './footer'\nimport Sidebar from './sidebar'\n\nimport CheckboxContext from '../contexts/CheckboxContext'\n\ntype Props = {\n  children: ReactNode;\n  isIdolslist?: boolean;\n}\n\nconst Layout = ({ children, isIdolslist }: Props) => {\n\n  // const [check, setCheck] = useState(false);\n  // const [name, setName] = useState('');\n\n  // const [checkList, setCheckList] = useState<boolean[]>([]);\n  const [groupidList,setGroupidList]=useState<string[]>([\"1\",\"2\",\"3\"]);\n  const [checkList, setCheckList] = useState<boolean[]>(new Array(3).fill(true));\n\n    return (\n      // <CheckboxContext.Provider value={{check, setCheck, name, setName}}>\n      <CheckboxContext.Provider value={{ checkList, setCheckList, groupidList, setGroupidList }}>\n\n        {/* <div className=\"flex flex-col h-screen\">\n          <Header />\n          <main className=\"flex-grow py-5 md:p-6\">\n            <div className=\"flex\">\n              <div className=\"basis-1/12 p-4 hidden md:inline-block\">\n                <Sidebar isIdolslist={isIdolslist}/>\n              </div>\n              <div className=\"flex-auto md:p-4\">\n                 {children}\n              </div>\n            </div>\n          </main>\n          <Footer/>\n        </div> */}\n        \n      </CheckboxContext.Provider>\n     \n    )\n  }\n\n  export default Layout\n  "],"mappings":";;AAAA,OAAOA,KAAK,IAAeC,QAAQ,QAAQ,OAAO;AAMlD,OAAOC,eAAe,MAAM,6BAA6B;AAAA;AAOzD,MAAMC,MAAM,GAAG,QAAsC;EAAA;EAAA,IAArC;IAAEC,QAAQ;IAAEC;EAAmB,CAAC;EAE9C;EACA;;EAEA;EACA,MAAM,CAACC,WAAW,EAACC,cAAc,CAAC,GAACN,QAAQ,CAAW,CAAC,GAAG,EAAC,GAAG,EAAC,GAAG,CAAC,CAAC;EACpE,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAY,IAAIS,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EAE5E;IAAA;IACE;IACA,QAAC,eAAe,CAAC,QAAQ;MAAC,KAAK,EAAE;QAAEH,SAAS;QAAEC,YAAY;QAAEH,WAAW;QAAEC;MAAe;IAAE;MAAA;MAAA;MAAA;IAAA;EAiB/D;AAG/B,CAAC;AAAA,GA/BGJ,MAAM;AAAA,KAANA,MAAM;AAiCV,eAAeA,MAAM;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}